name: Build & Deploy on Production

on:
  push:
    branches:
      - master  # Runs only when changes are merged into 'develop'

jobs:
  build-deploy-on-production:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up JDK 17 for building the JAR
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Gradle cache to speed up builds
      - name: Set up Gradle Cache
        uses: gradle/gradle-build-action@v2

      #Giving access to execute gradlew commands
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Run Tests with JaCoCo coverage
      - name: Run Tests with Coverage
        run: ./gradlew test jacocoTestReport jacocoTestCoverageVerification

      # Verify Coverage
      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(grep -oP '(?<=<counter type="INSTRUCTION" missed=")[0-9]+' build/reports/jacoco/test/jacocoTestReport.xml | awk '{missed += $1} END {print missed}')
          TOTAL=$(grep -oP '(?<=<counter type="INSTRUCTION" covered=")[0-9]+' build/reports/jacoco/test/jacocoTestReport.xml | awk '{covered += $1} END {print covered}')
          PERCENTAGE=$(echo "scale=2; $TOTAL / ($TOTAL + $COVERAGE) * 100" | bc)
          echo "Coverage: $PERCENTAGE%"
          if (( $(echo "$PERCENTAGE < 85" | bc -l) )); then
            echo "❌ Coverage is below 85%! Failing the pipeline."
            exit 1
          fi

      # Run tests first before build to optimize the process with early failure
      - name: Run Tests
        run: ./gradlew test

      # Build the JAR file
      - name: Build JAR with Gradle
        run: ./gradlew clean build

      # Log in to DockerHub using GitHub Secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/inventory-house:latest .

      # Push the image to DockerHub
      - name: Push Docker Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/inventory-house:latest